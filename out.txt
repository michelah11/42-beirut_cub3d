/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mabou-ha <mabou-ha@@student.42.fr>         +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/24 22:39:34 by mabou-ha          #+#    #+#             */
/*   Updated: 2025/07/05 21:10:03 by mabou-ha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "cub3d.h"

static int	parse_args(t_data *data, char **av)
{
	if (val_file(av[1], true) == 1)
		clean_exit(data, 1);
	parse_data(av[1], data);
	if (get_file_data(data, data->mapinfo.file) == FAILURE)
		return (free_data(data));
	return (0);
}
int	main(int ac, char **av)
{
	t_data	data;

	if (ac != 2)
		return (err_msg("Usage", "./cub3d <path/to/map.cub>" ,1));
	init_data(&data);
	if (parse_args(&data, av) != 0)
		return (1);
	init_mlx(&data);
	init_textures(&data);
	print_data(&data);
	return (0);
}#include "cub3d.h"

static void	print_map(char **map)
{
	int i = 0;
	while (map[i])
	{
		printf("  map[%d]: \"%s\"\n", i, map[i]);
		i++;
	}
}

void	print_data(const t_data *d)
{
	/* Window */
	printf("Window size: %d × %d\n",
		d->win_width,
		d->win_height);

	/* MapInfo */
	printf("MapInfo:\n"
	       "  path:           %s\n"
	       "  fd:             %d\n"
	       "  line_count:     %d\n"
	       "  dimensions:     %d × %d\n"
	       "  index_end_map:  %d\n",
		d->mapinfo.path,
		d->mapinfo.fd,
		d->mapinfo.line_count,
		d->mapinfo.width,
		d->mapinfo.height,
		d->mapinfo.index_end_of_map);
	print_map(d->map);

	/* Player */
	printf("Player:\n"
	       "  dir char:       %c\n"
	       "  pos:            (%.3f, %.3f)\n"
	       "  dir vector:     (%.3f, %.3f)\n"
	       "  plane vector:   (%.3f, %.3f)\n"
	       "  moved:          %d\n"
	       "  move flags:     x=%d y=%d\n"
	       "  rotate flag:    %d\n",
		d->player.dir,
		d->player.pos_x,    d->player.pos_y,
		d->player.dir_x,    d->player.dir_y,
		d->player.plane_x,  d->player.plane_y,
		d->player.has_moved,
		d->player.move_x,   d->player.move_y,
		d->player.rotate);

	/* Ray */
	printf("Ray:\n"
	       "  cam_x:          %.3f\n"
	       "  dir:            (%.3f, %.3f)\n"
	       "  map cell:       (%d, %d)\n"
	       "  step:           (%d, %d)\n"
	       "  sideDist:       (%.3f, %.3f)\n"
	       "  deltaDist:      (%.3f, %.3f)\n"
	       "  wall_dist:      %.3f\n"
	       "  wall_x:         %.3f\n"
	       "  side hit:       %d\n"
	       "  draw line:      %d → %d (height %d)\n",
		d->ray.camera_x,
		d->ray.dir_x,       d->ray.dir_y,
		d->ray.map_x,       d->ray.map_y,
		d->ray.step_x,      d->ray.step_y,
		d->ray.sidedist_x,  d->ray.sidedist_y,
		d->ray.deltadist_x, d->ray.deltadist_y,
		d->ray.wall_dist,
		d->ray.wall_x,
		d->ray.side,
		d->ray.draw_start,  d->ray.draw_end,
		d->ray.line_height);

	/* Texture info */
	printf("TexInfo:\n"
	       "  North:          %s\n"
	       "  South:          %s\n"
	       "  West:           %s\n"
	       "  East:           %s\n"
	       "  hex_floor:      0x%lX\n"
	       "  hex_ceiling:    0x%lX\n"
	       "  size:           %d\n"
	       "  index:          %d\n"
	       "  step:           %.3f\n"
	       "  pos:            %.3f\n"
	       "  tex coord:      (%d, %d)\n",
		d->texinfo.north,
		d->texinfo.south,
		d->texinfo.west,
		d->texinfo.east,
		d->texinfo.hex_floor,
		d->texinfo.hex_ceiling,
		d->texinfo.size,
		d->texinfo.index,
		d->texinfo.step,
		d->texinfo.pos,
		d->texinfo.x,
		d->texinfo.y);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init_data.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mabou-ha <mabou-ha@@student.42.fr>         +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/24 22:58:29 by mabou-ha          #+#    #+#             */
/*   Updated: 2025/06/30 22:41:22 by mabou-ha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "cub3d.h"

void	init_img_clean(t_img *img)
{
	img->img = NULL;
	img->addr = NULL;
	img->pixel_bits = 0;
	img->size_line = 0;
	img->endian = 0;
}

void	init_ray(t_ray *ray)
{
	ray->camera_x = 0;
	ray->dir_x = 0;
	ray->dir_y = 0;
	ray->map_x = 0;
	ray->map_y = 0;
	ray->step_x = 0;
	ray->step_y = 0;
	ray->sidedist_x = 0;
	ray->sidedist_y = 0;
	ray->deltadist_x = 0;
	ray->deltadist_y = 0;
	ray->wall_dist = 0;
	ray->wall_x = 0;
	ray->side = 0;
	ray->line_height = 0;
	ray->draw_start = 0;
	ray->draw_end = 0;
}

static void	init_mapinfo(t_mapinfo *mapinfo)
{
	mapinfo->fd = 0;
	mapinfo->line_count = 0;
	mapinfo->path = NULL;
	mapinfo->file = NULL;
	mapinfo->height = 0;
	mapinfo->width = 0;
	mapinfo->index_end_of_map = 0;
}

static void	init_player(t_player *player)
{
	player->dir = '\0';
	player->pos_x = 0.0;
	player->pos_y = 0.0;
	player->dir_x = 0.0;
	player->dir_y = 0.0;
	player->plane_x = 0.0;
	player->plane_y = 0.0;
	player->has_moved = 0;
	player->move_x = 0;
	player->move_y = 0;
	player->rotate = 0;
}

void	init_data(t_data *data)
{
	data->mlx = NULL;
	data->win = NULL;
	data->win_height = WIN_HEIGHT;
	data->win_width = WIN_WIDTH;
	init_player(&data->player);
	init_texinfo(&data->texinfo);
	data->map = NULL;
	init_mapinfo(&data->mapinfo);
	init_img_clean(&data->minimap);
	// data->ray;
	data->texture_pixels = NULL;
	data->textures = NULL;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init_mlx.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mabou-ha <mabou-ha@@student.42.fr>         +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/24 23:10:23 by mabou-ha          #+#    #+#             */
/*   Updated: 2025/06/25 00:30:55 by mabou-ha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "cub3d.h"

static void	check_img(t_data *data, t_img *image)
{
	if (image->img == NULL)
		clean_exit(data, err_msg("mlx", "Could not create mlx image", 1));
	image->addr = (int *)mlx_get_data_addr(image->img, &image->pixel_bits,
			&image->size_line, &image->endian);
	return ;
}

void	init_img(t_data *data, t_img *image, int width, int height)
{
	init_img_clean(image);
	image->img = mlx_new_image(data->mlx, width, height);
	check_img(data, image);
	return ;
}

void	init_texture_img(t_data *data, t_img *image, char *path)
{
	init_img_clean(image);
	image->img = mlx_xpm_file_to_image(data->mlx, path, &data->texinfo.size,
			&data->texinfo.size);
	check_img(data, image);
	return ;
}

void	init_mlx(t_data *data)
{
	data->mlx = mlx_init();
	if (!data->mlx)
		clean_exit(data, err_msg("mlx", "Could not start mlx", 1));
	data->win = mlx_new_window(data->mlx, WIN_WIDTH, WIN_HEIGHT, "cub3D");
	if (!data->win)
		clean_exit(data, err_msg("mlx", "Could not create mlx window", 1));
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init_textures.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mabou-ha <mabou-ha@@student.42.fr>         +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/24 23:10:36 by mabou-ha          #+#    #+#             */
/*   Updated: 2025/07/05 19:12:22 by mabou-ha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "cub3d.h"

static int	*xpm_to_img(t_data *data, char *path)
{
	t_img	tmp;
	int		*buffer;
	int		x;
	int		y;

	init_texture_img(data, &tmp, path);
	buffer = ft_calloc(1,
			sizeof(int) * data->texinfo.size * data->texinfo.size);
	if (!buffer)
		clean_exit(data, err_msg(NULL, "Could not allocate memory", 1));
	y = 0;
	while (y < data->texinfo.size)
	{
		x = 0;
		while (x < data->texinfo.size)
		{
			buffer[y * data->texinfo.size + x]
				= tmp.addr[y * data->texinfo.size + x];
			++x;
		}
		y++;
	}
	mlx_destroy_image(data->mlx, tmp.img);
	return (buffer);
}

void	init_textures(t_data *data)
{
	data->textures = ft_calloc(5, sizeof * data->textures);
	if (!data->textures)
		clean_exit(data, err_msg(NULL, "Could not allocate memory", 1));
	data->textures[0] = xpm_to_img(data, data->texinfo.north);
	data->textures[1] = xpm_to_img(data, data->texinfo.south);
	data->textures[2] = xpm_to_img(data, data->texinfo.east);
	data->textures[3] = xpm_to_img(data, data->texinfo.west);
}

void	init_texinfo(t_texinfo *tex)
{
	tex->north = NULL;
	tex->south = NULL;
	tex->west = NULL;
	tex->east = NULL;
	tex->floor = 0;
	tex->ceiling = 0;
	tex->hex_floor = 0x0;
	tex->hex_ceiling = 0x0;
	tex->size = TEX_SIZE;
	tex->index = 0;
	tex->step = 0.0;
	tex->pos = 0.0;
	tex->x = 0;
	tex->y = 0;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   create_map.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mabou-ha <mabou-ha@@student.42.fr>         +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/05 18:32:58 by mabou-ha          #+#    #+#             */
/*   Updated: 2025/07/05 19:28:14 by mabou-ha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "cub3d.h"

static int	count_lines(t_data *data, char **file, int i)
{
	int	index_value;
	int	j;

	index_value = i;
	while (file[i])
	{
		j = 0;
		while (white_spc(file[i][j]))
			j++;
		if (file[i][j] != '1')
			break ;
		i++;
	}
	data->mapinfo.index_end_of_map = i;
	return (i - index_value);
}

static int	fill_map_arr(t_mapinfo *mapinfo, char **map_arr, int index)
{
	int	i;
	int	j;

	mapinfo->width = find_largest_len(mapinfo, index);
	i = 0;
	while (i < mapinfo->height)
	{
		j = 0;
		map_arr[i] = malloc(sizeof(char) * (mapinfo->width + 1));
		if (!map_arr[i])
			return (err_msg(NULL, "Cannot allocate memory", FAILURE));
		while (mapinfo->file[index][j] && mapinfo->file[index][j] != '\n')
		{
			map_arr[i][j] = mapinfo->file[index][j];
			j++;
		}
		while (j < mapinfo->width)
			map_arr[i][j++] = '\0';
		i++;
		index++;
	}
	map_arr[i] = NULL;
	return (SUCCESS);
}

static int	get_map(t_data *data, char **file, int i)
{
	data->mapinfo.height = count_lines(data, file, i);
	data->map = malloc(sizeof(char *) * (data->mapinfo.height + 1));
	if (!data->map)
		return (err_msg(NULL, "Cannot allocate memory", FAILURE));
	if (fill_map_arr(&data->mapinfo, data->map, i) == FAILURE)
		return (FAILURE);
	return (SUCCESS);
}

static void	change_spaces(t_data *data)
{
	int	i;
	int	j;

	i = 0;
	while (data->map[i])
	{
		j = 0;
		// while (white_spc(data->map[i][j]))
		// 	j++;
		while (data->map[i][j])
		{
			if (white_spc(data->map[i][j])
				&& j != data->map[i][ft_strlen(data->map[i]) - 1])
				data->map[i][j] = '2';
			j++;
		}
		i++;
	}
}

int	create_map(t_data *data, char **file, int i)
{
	if (get_map(data, file, i) == FAILURE)
		return (FAILURE);
	change_spaces(data);
	return (SUCCESS);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   fill_col_tex.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mabou-ha <mabou-ha@@student.42.fr>         +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/30 21:28:03 by mabou-ha          #+#    #+#             */
/*   Updated: 2025/07/05 22:13:06 by mabou-ha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "cub3d.h"

static bool	non_numeric_char(char *str)
{
	int		i;

	i = 0;
	while (white_spc(str[i]))
		i++;
	while (ft_isdigit(str[i]))
		i++;
	while (white_spc(str[i]))
		i++;
	return (str[i] != '\0');
}

static int	*convert_colors(char **rgb_colors, int *rgb)
{
	int		i;

	i = 0;
	while (rgb_colors[i] != NULL)
	{
		if (non_numeric_char(rgb_colors[i]))
		{
			err_msg(NULL, "Numeric positive color components are acceptable", 0);
			free_arr((void **)rgb_colors);
			free(rgb);
			return (NULL);
		}
		rgb[i] = ft_atoi(rgb_colors[i]);
		if (rgb[i] < 0 || rgb[i] > 255)
		{
			err_msg(NULL, "Color component out of 0–255 range", 0);
			free_arr((void **)rgb_colors);
			free(rgb);
			return (NULL);
		}
		i++;
	}
	free_arr((void **)rgb_colors);
	return (rgb);
}

static int	*set_colors(char *line, char **rgb_split, int *rgb)
{
	int		count;

	while (white_spc(*line))
		line++;
	rgb_split = ft_split(line, ',');
	if (!rgb_split)
	{
		err_msg(NULL, "Failed to split color line", 0);
		return (NULL);
	}
	count = 0;
	while (rgb_split[count])
		count++;
	if (count != 3)
	{
		err_msg(NULL, "Expected exactly 3 color values", 0);
		free_arr((void **)rgb_split);
		return (NULL);
	}
	rgb = malloc(sizeof(int) * 3);
	if (!rgb)
	{
		err_msg(NULL, "Could not allocate memory", 0);
		free_arr((void **)rgb_split);
		return (NULL);
	}
	return (convert_colors(rgb_split, rgb));
}

int	fill_col_tex(t_data *data, t_texinfo *tex, char *line, int j)
{
	if (line[j + 1] && ft_isprint(line[j + 1]) && white_spc(line[j + 1]))
		return (err_msg(data->mapinfo.path, "Invalid floor/ceiling colors", ERROR));
	if (!tex->ceiling && line[j] == 'C')
	{
		tex->ceiling = set_colors(line + j + 1, NULL, NULL);
		if (tex->ceiling == 0)
			return (err_msg(data->mapinfo.path, "Invalid floor color", ERROR));
	}
	else if (!tex->floor && line[j] == 'F')
	{
		tex->floor = set_colors(line + j + 1, NULL, NULL);
		if (tex->floor == 0)
			return (err_msg(data->mapinfo.path, "Invalid floor colors", ERROR));
	}
	// else
	// 	return (err_msg(data->mapinfo.path, "Invalid floor/ceiling color11", ERROR));
	return (SUCCESS);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   fill_dir_tex.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mabou-ha <mabou-ha@@student.42.fr>         +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/27 01:42:07 by mabou-ha          #+#    #+#             */
/*   Updated: 2025/07/05 21:27:07 by mabou-ha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "cub3d.h"

static char	*get_tex_path(char *line, int j)
{
	int		len;
	int		i;
	char	*path;

	while (line[j] && (line[j] == ' ' || line[j] == '\t'))
		j++;
	len = j;
	while (line[len] && (line[len] != ' ' && line[len] != '\t'))
		len++;
	path = malloc(sizeof(char) * (len - j + 1));
	if (!path)
		return (NULL);
	i = 0;
	while (line[j] && (line[j] != ' ' && line[j] != '\t' && line[j] != '\n'))
		path[i++] = line[j++];
	path[i] = '\0';
	while (line[j] && (line[j] == ' ' || line[j] == '\t'))
		j++;
	if (line[j] && line[j] != '\n')
	{
		free(path);
		path = NULL;
	}
	return (path);
}

int	fill_dir_tex(t_texinfo *tex, char *line, int j)
{
	if (line[j + 2] && ft_isprint(line[j + 2]))
		return (ERROR);
	if (line[j] == 'N' && line[j + 1] == 'O' && !tex->north)
		tex->north = get_tex_path(line, j + 2);
	else if (line[j] == 'S' && line[j + 1] == 'O' && !tex->south)
		tex->south = get_tex_path(line, j + 2);
	else if (line[j] == 'W' && line[j + 1] == 'E' && !tex->west)
		tex->west = get_tex_path(line, j + 2);
	else if (line[j] == 'E' && line[j + 1] == 'A' && !tex->east)
		tex->east = get_tex_path(line, j + 2);
	else
		return (ERROR);
	return (SUCCESS);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_file_data.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mabou-ha <mabou-ha@@student.42.fr>         +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/30 21:28:44 by mabou-ha          #+#    #+#             */
/*   Updated: 2025/07/05 21:57:02 by mabou-ha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "cub3d.h"

static int	get_data(t_data *data, char **map, int i, int j)
{
	while (map[i][j] == ' ' || map[i][j] == '\t' || map[i][j] == '\n')
		j++;
	if (ft_isprint(map[i][j]) && !ft_isdigit(map[i][j]))
	{
		if (map[i][j + 1] && ft_isprint(map[i][j + 1])
			&& !ft_isdigit(map[i][j + 1]))
		{
			if (fill_dir_tex(&data->texinfo, map[i], j) == ERROR)
			{
				return (err_msg(data->mapinfo.path, "Invalid texture(s)", FAILURE));
			}
			return (BREAK);
		}	
		else
		{
			if (fill_col_tex(data, &data->texinfo, map[i], j) == ERROR)
				return (FAILURE);
			return (BREAK);
		}	
	}
	// else if (ft_isdigit(map[i][j]))
	// {
	// 	if (create_map(data, map, i) == 1)
	// 		return (err_msg(data->mapinfo.path, "Map description is wrong", 1));
	// 	return (0);
	// }
	return (4);
}

int	get_file_data(t_data *data, char **map)
{
	int	i;
	int	j;
	int	ret;

	i = 0;
	while (map[i])
	{
		j = 0;
		while (map[i][j])
		{
			ret = get_data(data, map, i, j);
			if (ret == BREAK)
				break ;
			else if (ret == FAILURE)
				return (FAILURE);
			else if (ret == SUCCESS)
				return (SUCCESS);
			j++;
		}
		i++;
	}
	return (SUCCESS);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parse_file.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mabou-ha <mabou-ha@@student.42.fr>         +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/26 00:34:30 by mabou-ha          #+#    #+#             */
/*   Updated: 2025/07/05 19:18:44 by mabou-ha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "cub3d.h"

static int	get_nb_lines(const char *arg)
{
	int		fd;
	int		count;
	char	*line;

	if (!arg)
		return (err_msg("Argument", "is NULL", FAILURE));
	fd = open(arg, O_RDONLY);
	if (fd < 0)
		return (err_msg((char *)arg, strerror(errno), errno));
	count = 0;
	line = get_next_line(fd);
	while (line != NULL)
	{
		count++;
		free(line);
		line = get_next_line(fd);
	}
	close(fd);
	return (count);
}

static void	fill_tab(int row, int col, int i, t_data *data)
{
	char	*line;

	line = get_next_line(data->mapinfo.fd);
	while (line != NULL)
	{
		data->mapinfo.file[row] = ft_calloc(ft_strlen(line) + 1, sizeof(char));
		if (!data->mapinfo.file[row])
		{
			err_msg(NULL, "Could not allocate memory", 0);
			return (free_arr((void **)data->mapinfo.file));
		}
		while (line[i] != '\0')
			data->mapinfo.file[row][col++] = line[i++];
		data->mapinfo.file[row++][col] = '\0';
		col = 0;
		i = 0;
		free(line);
		line = get_next_line(data->mapinfo.fd);
	}
	data->mapinfo.file[row] = NULL;
}

void	parse_data(char *path, t_data *data)
{
	int		row;
	int		i;
	size_t	col;

	i = 0;
	row = 0;
	col = 0;
	data->mapinfo.line_count = get_nb_lines(path);
	data->mapinfo.path = path;
	data->mapinfo.file = ft_calloc(data->mapinfo.line_count + 1, sizeof(char *));
	if (!(data->mapinfo.file))
	{
		err_msg(NULL, "Could not allocate memory", 0);
		return ;
	}
	data->mapinfo.fd = open(path, O_RDONLY);
	if (data->mapinfo.fd < 0)
		err_msg(path, strerror(errno), FAILURE);
	else
	{
		fill_tab(row, col, i, data);
		close(data->mapinfo.fd);
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   utils.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mabou-ha <mabou-ha@@student.42.fr>         +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/05 15:55:49 by mabou-ha          #+#    #+#             */
/*   Updated: 2025/07/05 19:28:19 by mabou-ha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "cub3d.h"

bool	white_spc(char c)
{
	return ((c >= 9 && c <= 13) || c == 32);
}

size_t	find_largest_len(t_mapinfo *map, int i)
{
	size_t	max_len;
	size_t	len;

	max_len = ft_strlen(map->file[i]);
	while (map->file[i])
	{
		len = ft_strlen(map->file[i]);
		if (len > max_len)
			max_len = len;
		i++;
	}
	return (max_len);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   validate_arg.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mabou-ha <mabou-ha@@student.42.fr>         +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/25 23:54:24 by mabou-ha          #+#    #+#             */
/*   Updated: 2025/07/05 21:13:15 by mabou-ha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "cub3d.h"

static bool	check_dir(char *arg)
{
	int	fd;

	fd = open(arg, O_DIR);
	if (fd < 0)
	{
		return (false);
	}
	close(fd);
	return (true);
}

static bool	check_file_format(char *arg, bool cub_file)
{
	size_t	len;

	if (!arg)
		return (false);
	len = ft_strlen(arg);
	if (len < 4)
		return (false);
	if (cub_file)
		return (ft_strcmp(arg + len - 4, ".cub") == 0);
	else
		return (ft_strcmp(arg + len - 4, ".xpm") == 0);

}

int	val_file(char *arg, bool cub_file)
{
	int	fd;

	if (!arg)
		return (err_msg("Argument", "is null", FAILURE));
	if (check_dir(arg))
		return (err_msg(arg, "is a directory", FAILURE));
	if (!check_file_format(arg, cub_file))
	{
		if (cub_file)
			return (err_msg(arg, "is not a .cub file", FAILURE));
		else
			return (err_msg(arg, "is not a .xpm file", FAILURE));
	}
	fd = open(arg, O_RDONLY);
	if (fd < 0)
		return (err_msg(arg, strerror(errno), FAILURE));
	close(fd);
	return (SUCCESS);
}


/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   error.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mabou-ha <mabou-ha@@student.42.fr>         +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/24 22:41:35 by mabou-ha          #+#    #+#             */
/*   Updated: 2025/06/25 00:28:47 by mabou-ha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "cub3d.h"

int	err_msg(char *detail, char *str, int code)
{
	ft_putstr_fd("cub3D: Error", 2);
	if (detail)
	{
		ft_putstr_fd(": ", 2);
		ft_putstr_fd(detail, 2);
	}
	if (str)
	{
		ft_putstr_fd(": ", 2);
		ft_putstr_fd(str, 2);
	}
	ft_putstr_fd("\n", 2);
	return (code);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   exit.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mabou-ha <mabou-ha@@student.42.fr>         +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/24 23:55:55 by mabou-ha          #+#    #+#             */
/*   Updated: 2025/06/25 00:17:53 by mabou-ha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "cub3d.h"

static void	destroy_disp(t_data *data)
{
	mlx_destroy_display(data->mlx);
	mlx_loop_end(data->mlx);
	free(data->mlx);
	return ;
}

void	clean_exit(t_data *data, int code)
{
	if (!data)
		exit(code);
	if (data->win && data->mlx)
		mlx_destroy_window(data->mlx, data->win);
	if (data->mlx)
		destroy_disp(data);
	free_data(data);
	exit(code);
}

int	quit_cub3d(t_data *data)
{
	clean_exit(data, 0);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   free.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mabou-ha <mabou-ha@@student.42.fr>         +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/24 23:55:51 by mabou-ha          #+#    #+#             */
/*   Updated: 2025/07/05 19:11:19 by mabou-ha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "cub3d.h"

void	free_arr(void **arr)
{
	size_t	i;

	i = 0;
	while (arr[i])
	{
		free(arr[i]);
		i++;
	}
	if (arr)
	{
		free(arr);
		arr = NULL;
	}
}

static void	free_texinfo(t_texinfo *textures)
{
	if (textures->north)
		free(textures->north);
	if (textures->south)
		free(textures->south);
	if (textures->west)
		free(textures->west);
	if (textures->east)
		free(textures->east);
	if (textures->floor)
		free(textures->floor);
	if (textures->ceiling)
		free(textures->ceiling);
}

static void	free_map(t_data *data)
{
	if (data->mapinfo.fd > 0)
		close(data->mapinfo.fd);
	if (data->mapinfo.file)
		free_arr((void **)data->mapinfo.file);
	if (data->map)
		free_arr((void **)data->map);
}

int	free_data(t_data *data)
{
	if (data->textures)
		free_arr((void **)data->textures);
	if (data->texture_pixels)
		free_arr((void **)data->texture_pixels);
	free_texinfo(&data->texinfo);
	free_map(data);
	return (1);
}
